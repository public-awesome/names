/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.20.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  ask_interval: number;
  min_price: Uint128;
  trading_fee_bps: number;
}
export type ExecuteMsg = {
  set_ask: {
    seller: string;
    token_id: string;
  };
} | {
  remove_ask: {
    token_id: string;
  };
} | {
  update_ask: {
    seller: string;
    token_id: string;
  };
} | {
  set_bid: {
    token_id: string;
  };
} | {
  remove_bid: {
    token_id: string;
  };
} | {
  accept_bid: {
    bidder: string;
    token_id: string;
  };
} | {
  fund_renewal: {
    token_id: string;
  };
} | {
  refund_renewal: {
    token_id: string;
  };
} | {
  process_renewals: {
    time: Timestamp;
  };
} | {
  setup: {
    collection: string;
    minter: string;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type QueryMsg = {
  ask: {
    token_id: string;
  };
} | {
  asks: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  reverse_asks: {
    limit?: number | null;
    start_before?: number | null;
  };
} | {
  ask_count: {};
} | {
  asks_by_seller: {
    limit?: number | null;
    seller: string;
    start_after?: string | null;
  };
} | {
  bid: {
    bidder: string;
    token_id: string;
  };
} | {
  bids_by_bidder: {
    bidder: string;
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  bids: {
    limit?: number | null;
    start_after?: string | null;
    token_id: string;
  };
} | {
  bids_sorted_by_price: {
    limit?: number | null;
    start_after?: BidOffset | null;
  };
} | {
  reverse_bids_sorted_by_price: {
    limit?: number | null;
    start_before?: BidOffset | null;
  };
} | {
  bids_by_seller: {
    seller: string;
  };
} | {
  highest_bid: {
    token_id: string;
  };
} | {
  ask_hooks: {};
} | {
  bid_hooks: {};
} | {
  sale_hooks: {};
} | {
  params: {};
} | {
  renewal_queue: {
    time: Timestamp;
  };
} | {
  config: {};
};
export type Addr = string;
export interface BidOffset {
  bidder: Addr;
  price: Uint128;
  token_id: string;
}
export interface AskResponse {
  ask?: Ask | null;
}
export interface Ask {
  id: number;
  renewal_fund: Uint128;
  renewal_time: Timestamp;
  seller: Addr;
  token_id: string;
}
export interface AskCountResponse {
  count: number;
}
export interface HooksResponse {
  hooks: string[];
}
export interface AsksResponse {
  asks: Ask[];
}
export interface BidResponse {
  bid?: Bid | null;
}
export interface Bid {
  amount: Uint128;
  bidder: Addr;
  created_time: Timestamp;
  token_id: string;
}
export interface BidsResponse {
  bids: Bid[];
}
export interface ConfigResponse {
  collection: Addr;
  minter: Addr;
}
export type Decimal = string;
export interface ParamsResponse {
  params: SudoParams;
}
export interface SudoParams {
  ask_interval: number;
  min_price: Uint128;
  trading_fee_percent: Decimal;
}