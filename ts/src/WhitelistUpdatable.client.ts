/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint64, AdminResponse, Addr, Config, Boolean, Decimal } from "./WhitelistUpdatable.types";
export interface WhitelistUpdatableReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  includesAddress: ({
    address
  }: {
    address: string;
  }) => Promise<Boolean>;
  mintCount: ({
    address
  }: {
    address: string;
  }) => Promise<Uint64>;
  isProcessable: ({
    address
  }: {
    address: string;
  }) => Promise<Boolean>;
  admin: () => Promise<AdminResponse>;
  addressCount: () => Promise<Uint64>;
  perAddressLimit: () => Promise<Uint64>;
  mintDiscountPercent: () => Promise<Decimal>;
}
export class WhitelistUpdatableQueryClient implements WhitelistUpdatableReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.includesAddress = this.includesAddress.bind(this);
    this.mintCount = this.mintCount.bind(this);
    this.isProcessable = this.isProcessable.bind(this);
    this.admin = this.admin.bind(this);
    this.addressCount = this.addressCount.bind(this);
    this.perAddressLimit = this.perAddressLimit.bind(this);
    this.mintDiscountPercent = this.mintDiscountPercent.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  includesAddress = async ({
    address
  }: {
    address: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      includes_address: {
        address
      }
    });
  };
  mintCount = async ({
    address
  }: {
    address: string;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mint_count: {
        address
      }
    });
  };
  isProcessable = async ({
    address
  }: {
    address: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_processable: {
        address
      }
    });
  };
  admin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  addressCount = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      address_count: {}
    });
  };
  perAddressLimit = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      per_address_limit: {}
    });
  };
  mintDiscountPercent = async (): Promise<Decimal> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mint_discount_percent: {}
    });
  };
}
export interface WhitelistUpdatableInterface extends WhitelistUpdatableReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateAdmin: ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addAddresses: ({
    addresses
  }: {
    addresses: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeAddresses: ({
    addresses
  }: {
    addresses: string[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  processAddress: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updatePerAddressLimit: ({
    limit
  }: {
    limit: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  purge: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WhitelistUpdatableClient extends WhitelistUpdatableQueryClient implements WhitelistUpdatableInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateAdmin = this.updateAdmin.bind(this);
    this.addAddresses = this.addAddresses.bind(this);
    this.removeAddresses = this.removeAddresses.bind(this);
    this.processAddress = this.processAddress.bind(this);
    this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
    this.purge = this.purge.bind(this);
  }

  updateAdmin = async ({
    newAdmin
  }: {
    newAdmin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  addAddresses = async ({
    addresses
  }: {
    addresses: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_addresses: {
        addresses
      }
    }, fee, memo, funds);
  };
  removeAddresses = async ({
    addresses
  }: {
    addresses: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_addresses: {
        addresses
      }
    }, fee, memo, funds);
  };
  processAddress = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      process_address: {
        address
      }
    }, fee, memo, funds);
  };
  updatePerAddressLimit = async ({
    limit
  }: {
    limit: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_per_address_limit: {
        limit
      }
    }, fee, memo, funds);
  };
  purge = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      purge: {}
    }, fee, memo, funds);
  };
}